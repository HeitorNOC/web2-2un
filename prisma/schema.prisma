generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  cpf                   String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                 @default("USER")
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AdministratorAdditionalData {
  id        String    @id @default(uuid())
  name      String?  
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id])
}

model StudentAdditionalData {
  id                    String    @id @default(uuid())
  userId                String
  user                  User      @relation(fields: [userId], references: [id])
  name                  String?
  gender                String?
  phone                 String?
  birthDate             DateTime?
  height                Float?
  weight                Float?
  bf                    Float?
  comorbidity           String?
  assignedInstructorId  String?
  assignedInstructor    InstructorAdditionalData? @relation(fields: [assignedInstructorId], references: [id])
  status                String?
  paymentDate           DateTime? @default(now())
  photo                 Bytes?
  evolution             Json?
  evolutionDate         DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([id])
}

model InstructorAdditionalData {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  name       String?
  phone      String?
  cref       String?   @unique
  photo      Bytes?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([id])
}

model Machine {
  id               String    @id @default(uuid())
  name             String
  serialNumber     String    @unique
  acquisitionDate  DateTime
  status           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([id])
}