generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                       @id @default(cuid())
  name                        String?
  email                       String?                      @unique
  cpf                         String?                      @unique
  emailVerified               DateTime?
  image                       String?
  password                    String?
  role                        String                       @default("STUDENT")
  isActive                    Boolean                      @default(false)
  accounts                    Account[]
  isTwoFactorEnabled          Boolean                      @default(false)
  twoFactorConfirmation       TwoFactorConfirmation?
  AdministratorAdditionalData AdministratorAdditionalData?
  StudentAdditionalData       StudentAdditionalData?       @relation("StudentUser")
  InstructorAdditionalData    InstructorAdditionalData?    @relation("InstructorUser")
  StudentEvolution            StudentEvolution[]

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AdministratorAdditionalData {
  id        String   @id @default(uuid())
  name      String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model StudentAdditionalData {
  id                   String                    @id @default(uuid())
  userId               String                    @unique
  user                 User                      @relation(fields: [userId], references: [id], name: "StudentUser")
  assignedInstructorId String?
  assignedInstructor   InstructorAdditionalData? @relation(fields: [assignedInstructorId], references: [id], name: "AssignedInstructor")
  name                 String?
  gender               String?
  phone                String?
  birthDate            DateTime?
  height               Float?
  weight               Float?
  bf                   Float?
  comorbidity          String?
  status               String?
  paymentDate          DateTime?                 @default(now())
  planType             Int
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  Payment              Payment[]
  PaymentHistory       PaymentHistory[]
  trainingId           String?                   @unique
  training             Training?                 @relation(name: "StudentToTraining", fields: [trainingId], references: [id])

  @@index([id])
}

model InstructorAdditionalData {
  id        String                  @id @default(uuid())
  userId    String                  @unique
  user      User                    @relation(fields: [userId], references: [id], name: "InstructorUser", onDelete: Cascade)
  phone     String?
  cref      String?                 @unique
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  students  StudentAdditionalData[] @relation("AssignedInstructor")
  Training  Training[]

  @@index([id])
}

model Machine {
  id              String     @id @default(uuid())
  name            String
  serialNumber    String     @unique
  acquisitionDate DateTime
  status          String
  image           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  Exercise        Exercise[]

  @@index([id])
}

model Training {
  id           String                   @id @default(cuid())
  studentId    String                   @unique
  instructorId String
  student      StudentAdditionalData?   @relation(name: "StudentToTraining")
  instructor   InstructorAdditionalData @relation(fields: [instructorId], references: [id])
  blocks       TrainingBlock[]
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @default(now())
}

model TrainingBlock {
  id         String     @id @default(cuid())
  name       String
  type       String
  trainingId String
  training   Training   @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  exercises  Exercise[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Exercise {
  id              String        @id @default(cuid())
  name            String
  description     String?
  machineId       String
  machine         Machine       @relation(fields: [machineId], references: [id])
  trainingBlockId String
  trainingBlock   TrainingBlock @relation(fields: [trainingBlockId], references: [id], onDelete: Cascade)
  series          Int?
  repetitions     Int?
  suggestedWeight Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model StudentEvolution {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  height    Float?
  weight    Float?
  bf        Float?
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Payment {
  id                      String                 @id @default(cuid())
  amount                  Float
  method                  String
  paymentDate             DateTime               @default(now())
  planType                Int
  status                  String
  createdAt               DateTime               @default(now())
  PaymentHistory          PaymentHistory[]
  StudentAdditionalData   StudentAdditionalData? @relation(fields: [studentAdditionalDataId], references: [id])
  studentAdditionalDataId String?

  @@index([studentAdditionalDataId])
}

model PaymentHistory {
  id                      String                 @id @default(cuid())
  paymentId               String
  payment                 Payment                @relation(fields: [paymentId], references: [id])
  createdAt               DateTime               @default(now())
  StudentAdditionalData   StudentAdditionalData? @relation(fields: [studentAdditionalDataId], references: [id])
  studentAdditionalDataId String?

  @@index([paymentId])
  @@index([studentAdditionalDataId])
}
